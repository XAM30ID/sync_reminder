from traceback import format_exc

from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_GET, require_POST
from asgiref.sync import sync_to_async
from django.http import HttpRequest, JsonResponse
from django.conf import settings

from telebot.apihelper import ApiTelegramException
from telebot.types import Update

from bot import bot, logger, SettingsStates
from bot.handlers.reminder import *
from bot.handlers.menu import *
from bot.handlers.common import *


@require_GET
def set_webhook(request: HttpRequest) -> JsonResponse:
    '''
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±–æ—Ç–∞
    '''
    bot.set_webhook(url=f"{settings.HOOK}/bot/{settings.BOT_TOKEN}", allowed_updates=['message', 'callback_query'])
    bot.send_message(settings.OWNER_ID, "webhook set")
    return JsonResponse({"message": "OK"}, status=200)


@csrf_exempt
@require_POST
@sync_to_async
def index(request: HttpRequest) -> JsonResponse:
    '''
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–∞–π—Ç–∞
    '''
    if request.META.get("CONTENT_TYPE") != "application/json":
        return JsonResponse({"message": "Bad Request"}, status=403)

    json_string = request.body.decode("utf-8")
    update = Update.de_json(json_string)
    try:
        bot.process_new_updates([update])
    except ApiTelegramException as e:
        logger.error(f"Telegram exception. {e} {format_exc()}")
    except ConnectionError as e:
        logger.error(f"Connection error. {e} {format_exc()}")
    except Exception as e:
        bot.send_message(settings.OWNER_ID, f'Error from index: {e}')
        logger.error(f"Unhandled exception. {e} {format_exc()}")
    return JsonResponse({"message": "OK"}, status=200)


@bot.message_handler(commands=['start'])
def m_cmd_start(message: Message):
    '''
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
    '''
    
    try:
        cmd_start(message=message, bot=bot)
    except Exception as e:
        print(e)


@bot.message_handler(state=SettingsStates.timezone.name)
def m_final_sets(message: Message):
    '''
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    try:
        final_sets(message, bot)

    except Exception as e:
        logger.error(f'–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('o'))
def m_selected_addressing(call: CallbackQuery):
    '''
        –í—ã–±–æ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    '''
    try:
        selected_addressing(call, bot)

    except Exception as e:
        logger.error(f'–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('f'))
def m_selected_tone(call: CallbackQuery):
    '''
        –í—ã–±–æ—Ä —Ç–æ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    '''
    try:
        selected_tone(call, bot)
        
    except Exception as e:
        logger.error(f'–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–Ω–∞ –æ–±—â–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('t'))
def m_task_sets(call: CallbackQuery):
    '''
        –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–µ–π (–ó–∞–≤–µ—Ä—à–∏—Ç—å, –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏, —É–¥–∞–ª–∏—Ç—å)
    '''
    try:
        task_sets(call, bot)

    except Exception as e:
        logger.error(f'–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–µ–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@bot.message_handler(func=lambda message: message.text == 'üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' or message.text == '‚öôÔ∏è –ó–∞–¥–∞—á–∞')
def m_reminder_button(message: Message):
    '''
        –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    '''
    try:
        reminder_button(message=message, bot=bot)

    except Exception as e:
       logger.error(f'–ü—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@bot.message_handler(func=lambda message: message.text == 'üìã –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏')
def m_list_reminders(message: Message):
    '''
        –ö–Ω–æ–ø–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    '''
    try:
        list_reminders(message=message, bot=bot)

    except Exception as e:
        logger.error(f'–ü—Ä–∏ –≤—ã–≤–µ–¥–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@bot.message_handler(content_types=['voice'])
def m_handle_voice(message: Message):
    '''
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞
    '''
    try:
        handle_voice(message=message, bot=bot)

    except Exception as e:
        logger.error(f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {e}')


@bot.message_handler(content_types=['text'])
def m_handle_text(message: Message):
    '''
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    '''
    if bot.get_state(message.from_user.id) == SettingsStates.timezone.name:
        try:
            final_sets(message, bot)
        except Exception as e:
            logger.error(f'–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')

    else:
        try:
            handle_text(message=message, bot=bot)
        except Exception as e:
            logger.error(f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')