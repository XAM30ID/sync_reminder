import datetime
import logging

from django.db.models import Q
from django.utils import timezone
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telebot import TeleBot

from bot import bot
from ..models import Reminder, Task

def send_reminders():
    pre_reminders = Reminder.objects.filter(reminder_time__lte=timezone.now(), is_pre_reminder_sent=False) | \
                    Reminder.objects.filter(~Q(repeat_type=None), ~Q(repeat_time=None), repeat_time__lte=timezone.now() - datetime.timedelta(minutes=15), is_pre_reminder_sent=False)
    
    pre_tasks = Task.objects.filter(reminder_time__lte=timezone.now(), is_pre_reminder_sent=False) | \
                Task.objects.filter(~Q(repeat_type=None), ~Q(repeat_time=None), repeat_time__lte=timezone.now() - datetime.timedelta(minutes=15), is_pre_reminder_sent=False)
    
    reminders = Reminder.objects.filter(reminder_time__lte=timezone.now(), is_main_reminder_sent=False) | \
                Reminder.objects.filter(~Q(repeat_type=None), ~Q(repeat_time=None), repeat_time__lte=timezone.now(), is_main_reminder_sent=False)
    
    tasks = Task.objects.filter(reminder_time__lte=timezone.now(), is_completed=False) | \
            Task.objects.filter(~Q(repeat_type=None), ~Q(repeat_time=None), repeat_time__lte=timezone.now(), is_main_reminder_sent=False, is_completed=False) | \
            Task.objects.filter(transfer_time__lte=timezone.now(), is_transfered=True, is_completed=False)
    
    try:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for pre_reminder in pre_reminders:
            repeat_info = ""
            if not pre_reminder.repeat_type is None:
                if pre_reminder.repeat_type == 'daily':
                    repeat_info = " üîÑ"
                elif pre_reminder.repeat_type == 'weekly':
                    repeat_info = " üîÑ"

            bot.send_message(
                chat_id=pre_reminder.user.user_id,
                text=f"‚è∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç)!{repeat_info}\n"
                f"üìù {pre_reminder.text}"
            )
            with open('all_reminders.txt', 'a', encoding='utf-8') as f:
                f.write('\n–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ' + str(pre_reminder.text) + str(pre_reminder.repeat_type))
                f.write('\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(pre_reminder.user.user_id))

            pre_reminder.is_pre_reminder_sent = True
            pre_reminder.save()
        
        for reminder in reminders:
            repeat_info = ""
            if not reminder.repeat_type is None:
                if reminder.repeat_type == 'daily':
                    repeat_info = " üîÑ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞)"
                elif reminder.repeat_type == 'weekly':
                    repeat_info = " üîÑ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)"
            
            bot.send_message(
                chat_id=reminder.user.user_id,
                text=f"üîî –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ!{repeat_info}\n"
                f"üìù {reminder.text}"
            )

            reminder.is_main_reminder_sent = True
            reminder.save()

        for task in pre_tasks:
            repeat_info = ""
            if not task.repeat_type is None:
                if task.repeat_type == 'daily':
                    repeat_info = " üîÑ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞)"
                elif task.repeat_type == 'weekly':
                    repeat_info = " üîÑ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)"

            bot.send_message(
                chat_id=task.user.user_id,
                text=f"‚è∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ (—á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç)!{repeat_info}\n"
                f"üìù {task.text}"
            )
            task.is_pre_reminder_sent = True
            task.save()
        
        for task in tasks:
            kb = [
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å!", callback_data=f"t.finish|{task.id}"),
                InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"t.put_off|{task.id}"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"t.remove|{task.id}")
            ]
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å!", callback_data=f"t.finish|{task.id}"))
            markup.add(InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"t.put_off|{task.id}"))
            markup.add(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"t.remove|{task.id}"))
            
            repeat_info = ""
            if not task.repeat_type is None:
                if task.repeat_type == 'daily':
                    repeat_info = " üîÑ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞)"
                elif task.repeat_type == 'weekly':
                    repeat_info = " üîÑ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)"

            bot.send_message(
                chat_id=task.user.user_id,
                text=f"üîî –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ!{repeat_info}\n"
                f"üìù {task.text}",
                reply_markup=markup
            )

            task.is_main_reminder_sent = True
            task.save()


    except Exception as e:
        logging.error(f"Error checking reminders: {e}")
        with open('all_reminders.txt', 'a', encoding='utf-8') as f:
            f.write('\n–û–®–ò–ë–ö–ê: ' + str(e))
    

def clear_reminders():
    try:
        to_delete = Reminder.objects.filter(reminder_time__lte=datetime.datetime.now())
        with open('delete_log.txt', 'a', encoding='utf-8') as f:
            f.write('\n–£–¥–∞–ª–µ–Ω–æ: ' + str(to_delete.count))

        to_delete.delete()

    except Exception as e:
        with open('delete_log.txt', 'a', encoding='utf-8') as f:
            f.write('\n\n' + e)


def task_sets(call: CallbackQuery, bot: TeleBot):
    print(call.data)
    task_data = call.data.split('.')[1].split('|')
    
    if task_data[0] == 'finish':
        try: 
            bot.answer_callback_query(callback_query_id=call.id)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            task = Task.objects.get(id=task_data[1])
            task.is_completed = True
            task.save()
            bot.send_message(
                text='–û—Ç–ª–∏—á–Ω–æ!'
                f'\n–ó–∞–¥–∞—á–∞ "{task.text}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ',
                chat_id=call.message.chat.id
                )
        except Exception as e:
            bot.send_message(
                text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º',
                chat_id=call.message.chat.id
            )
            print(e)

    if task_data[0] == 'put_off':
        try: 
            bot.answer_callback_query(callback_query_id=call.id)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            task = Task.objects.get(id=task_data[1])
            offset = datetime.timedelta(hours=int(task.user.timezone[1:]))
            custom_tz = timezone.get_fixed_timezone(offset)
            transfer_time = task.reminder_time.astimezone(custom_tz) + datetime.timedelta(minutes=30)
            task.is_transfered = True
            task.transfer_time = transfer_time
            task.save()
            bot.send_message(
                text='–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –ø–æ–ª—á–∞—Å–∞.'
                f'\n–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ {transfer_time}',
                chat_id=call.message.chat.id
                )
        except Exception as e:
            bot.send_message(
                text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º',
                chat_id=call.message.chat.id
            )
            print(e)

    if task_data[0] == 'remove':
        try: 
            bot.answer_callback_query(callback_query_id=call.id)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            task = Task.objects.get(id=task_data[1])
            bot.send_message(
                text=f'\n–ó–∞–¥–∞—á–∞ "{task.text}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞! ‚úÖ',
                chat_id=call.message.chat.id
                )
            task.delete()
        except Exception as e:
            bot.send_message(
                text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º',
                chat_id=call.message.chat.id
            )
            print(e)
    