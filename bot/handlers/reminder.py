import os
import re
import time
from datetime import datetime, timedelta

from telebot.apihelper import ApiTelegramException
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message, InputMediaPhoto, User
from telebot import TeleBot

from django.utils import timezone

from config import AI_MODEL
from .ai import OpenAIAPI
from ..services.parser import parse_reminder_time, parse_date_query
from ..services.voice import convert_ogg_to_wav, transcribe_audio
from ..utils.timezone import format_moscow_time
from ..models import Reminder, Task, UserProfile

from bot import bot, logger

AI = OpenAIAPI()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
user_delete_context = {}


def reminder_button(message: Message, bot: TeleBot):
    bot.send_chat_action(chat_id=message.chat.id, action="typing")
    bot.send_message(
        chat_id=message.chat.id,
        text="ü§ñ –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã! \n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ:\n\n"
        "‚úÖ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        "‚Ä¢ '–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±'\n"
        "‚Ä¢ '–ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:30 –≤—Å—Ç—Ä–µ—á–∞'\n"
        "‚Ä¢ '–ú–Ω–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00 –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã'\n"
        "‚Ä¢ '–ó–∞–≤—Ç—Ä–∞ –ø–æ–≥—É–ª—è—Ç—å —Å —Å–æ–±–∞–∫–æ–π'\n"
        "‚Ä¢ '–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ'\n\n"
        "‚ùå –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        "‚Ä¢ '–£–¥–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –∫–æ—Ç–∞'\n"
        "‚Ä¢ '–£–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ'\n"
        "‚Ä¢ '–û—Ç–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã'\n"
        "‚Ä¢ '–£–¥–∞–ª–∏ –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ –≤—Ä–∞—á–∞'\n\n"
        "üí¨ –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è:\n"
        "‚Ä¢ '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?'\n"
        "‚Ä¢ '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'\n"
        "‚Ä¢ '–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ'\n\n"
        "–Ø —Å–∞–º–∞ –ø–æ–π–º—É, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ–∑–¥–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!"
    )


def list_reminders(message: Message, bot: TeleBot):
    bot.send_chat_action(chat_id=message.chat.id, action="typing")
    reminders = Reminder.objects.filter(user_id=message.from_user.id)
    if not reminders:
        bot.send_message(
            chat_id=message.chat.id,
            text="üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
            "üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n"
            "‚Ä¢ '–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±'\n"
            "‚Ä¢ '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00 –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã'\n"
            "‚Ä¢ '–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:30 –≤—Å—Ç—Ä–µ—á–∞'"
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É
    one_time_reminders = reminders.filter(repeat_type=None)
    recurring_reminders = reminders.exclude(repeat_type=None)
    
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = ["üìã **–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n"]
    
    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if one_time_reminders:
        message_parts.append("üìÖ **–†–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**")
        for i, reminder in enumerate(one_time_reminders, 1):
            # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            offset = timedelta(hours=int(reminder.user.timezone[1:]))
            custom_tz = timezone.get_fixed_timezone(offset)
            reminder_time = reminder.reminder_time.astimezone(custom_tz)
            current_time = datetime.now(custom_tz)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if reminder_time > current_time:
                status_icon = "‚è≥"
                time_until = reminder_time - current_time
                if time_until.days > 0:
                    time_info = f"—á–µ—Ä–µ–∑ {time_until.days} –¥–Ω."
                elif time_until.seconds > 3600:
                    hours = time_until.seconds // 3600
                    time_info = f"—á–µ—Ä–µ–∑ {hours} —á."
                else:
                    minutes = time_until.seconds // 60
                    time_info = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."
            else:
                status_icon = "üîî"
                time_info = "—Å–∫–æ—Ä–æ"
            
            message_parts.append(
                f"{status_icon} **{reminder.text}**\n"
                f"   üïê {format_moscow_time(reminder_time)} ({time_info})\n"
            )
    # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if recurring_reminders:
        if one_time_reminders:
            message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        message_parts.append("üîÑ **–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**")
        for reminder in recurring_reminders:
            reminder_time = datetime.fromisoformat(reminder.reminder_time)
            
            if reminder.repeat_type == 'daily':
                repeat_text = "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
                next_time = reminder_time.strftime("%H:%M")

            elif reminder.repeat_type == 'weekly':
                repeat_text = "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
                weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
                weekday = weekdays[reminder_time.weekday()]
                next_time = f"{weekday} –≤ {reminder_time.strftime('%H:%M')}"

            else:
                repeat_text = "–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏"
                next_time = format_moscow_time(reminder_time)
            
            message_parts.append(
                f"üîÑ **{reminder.text}** ({repeat_text})\n"
                f"   üïê –°–ª–µ–¥—É—é—â–µ–µ: {next_time}\n"
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts.append(
        "\nüí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        "‚Ä¢ –†–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        "‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    full_message = "\n".join(message_parts)
    print(full_message)
    bot.send_message(chat_id=message.chat.id, text=full_message, parse_mode="Markdown")


def handle_voice(message: Message, bot: TeleBot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_chat_action(chat_id=message.chat.id, action="typing")
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file = bot.get_file(message.voice.file_id)
        file_path = f"voice_{message.from_user.id}_{message.message_id}.ogg"
        downloaded = bot.download_file(file.file_path)
        with open(file_path, 'wb') as f:
            f.write(downloaded)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = transcribe_audio(file_path)
        
        if not text:
            bot.send_message(chat_id=message.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        addressing = None
        tone = None
        user_info = UserProfile.objects.get(user_id=message.from_user.id)
        if user_info.pk:
            utc_info = user_info.timezone
            addressing = user_info.addressing
            tone = user_info.tone
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = AI.get_response(
            chat_id=message.from_user.id, 
            text=text, 
            model=AI_MODEL, 
            max_token=3000,
            tone=tone,
            addressing=addressing
        )
        
        if not ai_response or not ai_response.get('message'):
            bot.send_message(chat_id=message.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò
        parsed_response = AI.parse_ai_response(ai_response['message'])
        
        if parsed_response['type'] == 'reminder':
            # –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            create_reminder_from_ai(message, parsed_response, bot)
        elif parsed_response['type'] == 'delete':
            # –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            handle_delete_reminder_from_ai(message, parsed_response, bot)
        else:
            # –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
            bot.send_message(chat_id=message.chat.id, text=parsed_response['message'])
        
    except Exception as e:
        print(f"Error processing voice message: {e}")
        bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ü–û–î –í–û–ü–†–û–°–û–ú
def handle_text(message: Message, bot: TeleBot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ò–ò"""
    if message.text.startswith('/'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        return
    
    user_id = message.from_user.id
    user_text = message.text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
    if user_id in user_delete_context:
        context = user_delete_context[user_id]
        
        if user_text in ['—É–¥–∞–ª–∏ –≤—Å–µ', '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ']:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_ids = [r['id'] for r in context['reminders']]
            Reminder.objects.filter(id__in=reminder_ids).delete()
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            del user_delete_context[user_id]
            
            bot.send_message(
                chat_id=message.chat.id,
                text=f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(reminder_ids)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{context['search_text']}'"
            )
            return
        
        elif user_text in ['—É–¥–∞–ª–∏ –ø–µ—Ä–≤–æ–µ', '—É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤–æ–µ', '–ø–µ—Ä–≤–æ–µ']:
            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
            first_reminder = context['reminders'][0]
            Reminder.objects.get(id=first_reminder['id']).delete()
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            del user_delete_context[user_id]
            
            bot.send_message(
                chat_id=message.chat.id,
                text=f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: **{first_reminder['text']}**",
                parse_mode="Markdown"
            )
            return
        
        elif user_text in ['–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
            # –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            del user_delete_context[user_id]
            bot.send_message(chat_id=message.chat.id, text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        elif user_text.startswith('—É–¥–∞–ª–∏ ') and user_text[6:].isdigit():
            # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—É–¥–∞–ª–∏ 3")
            try:
                index = int(user_text[6:]) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1
                if 0 <= index < len(context['reminders']):
                    reminder_to_delete = context['reminders'][index]['id']
                    Reminder.objects.get(id=reminder_to_delete).delete()
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    del user_delete_context[user_id]
                    
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: **{reminder_to_delete['text']}**",
                        parse_mode="Markdown"
                    )
                    return
                else:
                    bot.send_message(chat_id=message.chat.id, text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ {len(context['reminders'])}")
                    return
            except:
                pass
    
    bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    addressing = None
    tone = None
    user_info = UserProfile.objects.get(user_id=message.from_user.id)
    if user_info.pk:
        addressing = user_info.addressing
        tone = user_info.tone
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    ai_response = AI.get_response(
        chat_id=message.from_user.id, 
        text=message.text, 
        model=AI_MODEL, 
        max_token=3000,
        tone=tone,
        addressing=addressing
    )
    
    if not ai_response or not ai_response.get('message'):
        bot.send_message(chat_id=message.chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò   
    parsed_response = AI.parse_ai_response(ai_response['message'])
    if parsed_response['type'] == 'reminder':
        # –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        create_reminder_from_ai(message, parsed_response, bot)
    elif parsed_response['type'] == 'delete':
        # –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        handle_delete_reminder_from_ai(message, parsed_response)
    else:
        # –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id=message.chat.id, text=parsed_response['message'])

def create_reminder_from_ai(message: Message, ai_data: dict, bot: TeleBot):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ò–ò
    """
    try:
        # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –ò–ò
        print(f"=== –û–¢–õ–ê–î–ö–ê –ò–ò ===")
        print(f"reminder_text: '{ai_data.get('reminder_text', '')}'")
        print(f"time_text: '{ai_data.get('time_text', '')}'")
        print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message.text}'")
        print("==================")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ò–ò –Ω–∞–ø—Ä—è–º—É—é
        reminder_text = ai_data.get('reminder_text', '').strip()
        time_text = ai_data.get('time_text', '').strip()
        
        print(f"=== –ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò ===")
        print(f"reminder_text –ø–æ—Å–ª–µ strip: '{reminder_text}'")
        print(f"time_text –ø–æ—Å–ª–µ strip: '{time_text}'")
        print("======================")
        
        if not reminder_text:
            bot.send_message(chat_id=message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return False
        
        if not time_text:
            bot.send_message(
                chat_id=message.chat.id,
                text=f"–ö–æ–Ω–µ—á–Ω–æ! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}\n\n"
                "‚è∞ –ö–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ '–∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞'\n"
                "‚Ä¢ '–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:30'\n"
                "‚Ä¢ '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00'\n"
                "‚Ä¢ '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞'"
            )
            return False
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        reminder_time, pre_reminder_time, parsed_text, repeat_type = parse_reminder_time(time_text)
        
        print(f"=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ï–†–ê ===")
        print(f"reminder_time: {reminder_time}")
        print(f"pre_reminder_time: {pre_reminder_time}")
        print(f"parsed_text: '{parsed_text}'")
        print(f"repeat_type: {repeat_type}")
        print("========================")
        
        if not reminder_time:
            bot.send_message(
                chat_id=message.chat.id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ñ—Ä–∞–∑—ã: '{time_text}'\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "- '–∑–∞–≤—Ç—Ä–∞ –≤ 10 —á–∞—Å–æ–≤ —É—Ç—Ä–∞'\n"
                "- '–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:30'\n"
                "- '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00'\n"
                "- '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞'\n"
                "- '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ –æ–±–µ–¥'\n"
                "- '–≤ —Å—Ä–µ–¥—É –≤ 2 –¥–Ω—è'"
            )
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ò–ò, –∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        final_reminder_text = reminder_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ò–ò
        
        print(f"=== –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ===")
        print(f"final_reminder_text: '{final_reminder_text}'")
        print(f"reminder_time: {reminder_time}")
        print("=======================")
        user = UserProfile.objects.get(user_id=message.from_user.id)
        if user.pk:
            utc_offset = int(user.timezone[1:])
        else:
            utc_offset = 3
        offset = timedelta(hours=utc_offset)
        custom_timezone = timezone.get_fixed_timezone(offset=offset)
        aware_reminder_time = timezone.make_aware(reminder_time, timezone=custom_timezone)
        aware_pre_reminder_time = timezone.make_aware(pre_reminder_time, timezone=custom_timezone)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ò–ò
        repeat_time=None
        if repeat_type == 'daily':
            repeat_time = aware_reminder_time + timedelta(days=1)
        elif repeat_type == 'weekly':
            repeat_time = aware_reminder_time + timedelta(weeks=1)
        
        Reminder.objects.create(
            user_id=message.from_user.id,
            text=final_reminder_text,
            reminder_time=aware_reminder_time,
            pre_reminder_time=aware_pre_reminder_time,
            is_pre_reminder_sent=False,
            is_main_reminder_sent=False,
            created_at=datetime.now(),
            repeat_type=repeat_type,
            repeat_time=repeat_time
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        repeat_info = ""
        if repeat_type:
            if repeat_type == 'daily':
                repeat_info = "\nüîÑ –¢–∏–ø: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
            elif repeat_type == 'weekly':
                repeat_info = "\nüîÑ –¢–∏–ø: –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
        
        bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"üìù –¢–µ–∫—Å—Ç: {final_reminder_text}\n"
            f"üïê –í—Ä–µ–º—è: {format_moscow_time(reminder_time)}\n"
            f"‚è∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {format_moscow_time(pre_reminder_time)}{repeat_info}"
        )
        return True
    except Exception as e:
        print(f"Error creating reminder: {e}")
        bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return False

def handle_delete_reminder_from_ai(message: Message, ai_data: dict, bot: TeleBot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ò–ò
    """
    try:
        search_text = ai_data.get('search_text', '').strip()
        
        print(f"=== –û–¢–õ–ê–î–ö–ê –£–î–ê–õ–ï–ù–ò–Ø ===")
        print(f"search_text: '{search_text}'")
        print("=======================")
        
        if not search_text:
            bot.send_message(chat_id=message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return False
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –¥–∞—Ç–µ
        target_date = parse_date_query(search_text)
        matching_reminders = []
        
        if target_date:
            print(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {target_date}")
            matching_reminders = Reminder.objects.filter(user_id=message.from_user.id, reminder_time=target_date)
            # matching_reminders = await find_user_reminders_by_date(message.from_user.id, target_date)
        
        # –ï—Å–ª–∏ –ø–æ –¥–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –¥–∞—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        if not matching_reminders:
            matching_reminders = Reminder.objects.filter(user_id=message.from_user.id, text=search_text)
            # matching_reminders = await find_user_reminders_by_text(message.from_user.id, search_text)
        
        if not matching_reminders:
            bot.send_message(
                chat_id=message.chat.id, 
                text=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_text}'\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–∞–∂–º–∏—Ç–µ 'üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
            )
            return False
        
        if len(matching_reminders) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
            reminder = matching_reminders[0]
            
            reminder_time = datetime.fromisoformat(reminder['reminder_time'])
            repeat_info = ""
            if reminder['repeat_type']:
                if reminder['repeat_type'] == 'daily':
                    repeat_info = " (–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)"
                elif reminder['repeat_type'] == 'weekly':
                    repeat_info = " (–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é)"
            
            bot.send_message(
                chat_id=message.chat.id, 
                text=f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n"
                f"üìù –¢–µ–∫—Å—Ç: {reminder['text']}\n"
                f"üïê –í—Ä–µ–º—è: {format_moscow_time(reminder_time)}{repeat_info}"
            )
            reminder.delete()
            return True
        
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫–æ–µ —É–¥–∞–ª–∏—Ç—å
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_delete_context[message.from_user.id] = {
                'reminders': matching_reminders,
                'search_text': search_text
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            search_type = "–ø–æ –¥–∞—Ç–µ" if target_date else "–ø–æ —Ç–µ–∫—Å—Ç—É"
            
            message_parts = [
                f"–ù–∞–π–¥–µ–Ω–æ {len(matching_reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {search_type} '{search_text}':\n"
            ]
            
            for i, reminder in enumerate(matching_reminders, 1):
                reminder_time = datetime.fromisoformat(reminder['reminder_time'])
                repeat_info = ""
                if reminder['repeat_type']:
                    if reminder['repeat_type'] == 'daily':
                        repeat_info = " üîÑ"
                    elif reminder['repeat_type'] == 'weekly':
                        repeat_info = " üîÑ"
                
                message_parts.append(
                    f"{i}. **{reminder['text']}**{repeat_info}\n"
                    f"   üïê {format_moscow_time(reminder_time)}\n"
                )
            
            message_parts.append(
                "\nüí° –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ:\n"
                "‚Ä¢ '–£–¥–∞–ª–∏ –≤—Å–µ' - —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ\n"
                "‚Ä¢ '–£–¥–∞–ª–∏ –ø–µ—Ä–≤–æ–µ' - —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤–æ–µ –≤ —Å–ø–∏—Å–∫–µ\n"
                "‚Ä¢ '–£–¥–∞–ª–∏ 3' - —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 3\n"
                "‚Ä¢ '–û—Ç–º–µ–Ω–∞' - —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
            )
            
            full_message = "\n".join(message_parts)
            bot.send_message(chat_id=message.chat.id, text=full_message, parse_mode="Markdown")
            return True
            
    except Exception as e:
        print(f"Error deleting reminder: {e}")
        bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return False 